---
- name: Configure worker node
  hosts: worker_node
  become: yes
  vars_files:
    - ../vars/cluster.yaml

  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        line: "127.0.1.1 {{ inventory_hostname }}"
        state: present

    - name: Update system packages
      shell: apt update && apt upgrade -y

    - name: Install essential packages
      apt:
        name:
          - tcpdump
          - wget
          - lynx
          - curl
        state: present
        update_cache: yes

    - name: Create banner file
      copy:
        dest: /etc/banner.txt
        content: |
          ╔════════════════════════════════════════════════════════╗
          ║                     WORKER-NODE                        ║
          ╠════════════════════════════════════════════════════════╣
          ║    Acesso restrito: somente usuários autorizados.      ║
          ╚════════════════════════════════════════════════════════╝
        mode: '0644'

    - name: Configure SSH to display banner
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Banner"
        line: "Banner /etc/banner.txt"
        state: present
        backup: yes

    - name: Restrict SSH access to authorized users
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?AllowUsers"
        line: "AllowUsers albano"
        state: present
        backup: yes

    - name: Enable public key authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PubkeyAuthentication"
        line: "PubkeyAuthentication yes"
        state: present
        backup: yes

    - name: Disable password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
        backup: yes

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Read token from control node
      slurp:
        src: "{{ token_file }}"
      register: token_data
      delegate_to: localhost

    - name: Decode token
      set_fact:
        k3s_token: "{{ token_data.content | b64decode | trim }}"

    - name: Install K3s agent
      shell: |
        curl -sfL https://get.k3s.io | \
        K3S_URL=https://{{ hostvars[groups['control_node'][0]].ansible_host }}:6443 \
        K3S_TOKEN={{ k3s_token }} \
        INSTALL_K3S_VERSION={{ k3s_version }} sh -s - agent
      args:
        creates: /etc/rancher/k3s/k3s-agent.yaml

    - name: Restart k3s-agent
      systemd:
        name: k3s-agent
        state: restarted
        enabled: yes
